<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>高性能 on vaaandark&#39;s blog</title>
    <link>https://vaaandark.top/tags/%E9%AB%98%E6%80%A7%E8%83%BD/</link>
    <description>Recent content in 高性能 on vaaandark&#39;s blog</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 18 Feb 2024 21:30:43 +0800</lastBuildDate>
    <atom:link href="https://vaaandark.top/tags/%E9%AB%98%E6%80%A7%E8%83%BD/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>恶补 CPU 知识之 Cache 和 TLB</title>
      <link>https://vaaandark.top/posts/relearning-cpu-2-cache-and-tlb/</link>
      <pubDate>Sun, 18 Feb 2024 21:30:43 +0800</pubDate>
      <guid>https://vaaandark.top/posts/relearning-cpu-2-cache-and-tlb/</guid>
      <description>&lt;p&gt;即是知识回顾，也是最近学到知识的拓展延伸。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ARMv6 Manual: &amp;ldquo;The only architecturally-guaranteed way to invalidate all aliases of a physical address from a VIPT instruction cache is to invalidate the entire instruction cache.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;cache-的基本情况&#34;&gt;Cache 的基本情况&lt;/h2&gt;
&lt;p&gt;Cache 也就是缓存，作为高速的 CPU 和低速的内存之间的缓冲，用于加速访问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>恶补 CPU 知识之分支预测</title>
      <link>https://vaaandark.top/posts/relearning-cpu-1-branch-prediction/</link>
      <pubDate>Sun, 18 Feb 2024 12:44:41 +0800</pubDate>
      <guid>https://vaaandark.top/posts/relearning-cpu-1-branch-prediction/</guid>
      <description>&lt;h2 id=&#34;前因&#34;&gt;前因&lt;/h2&gt;
&lt;p&gt;最近看了一篇介绍 Ventana 的 Veyron V1 核心的博客 &lt;a href=&#34;https://blog.eastonman.com/blog/2024/02/hot-chips-2023-ventanas-unconventional-veyron-v1/&#34;&gt;HotChips 2023: Ventana 不寻常的 Veyron V1&lt;/a&gt; ，里面出现了很多我没听说过或者不甚了解的名词，在阅读这篇博客和查找资料的过程中，我学到了很多新的 CPU 知识。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PAC2023娱乐赛</title>
      <link>https://vaaandark.top/posts/pac2023-game/</link>
      <pubDate>Thu, 06 Jul 2023 23:55:08 +0800</pubDate>
      <guid>https://vaaandark.top/posts/pac2023-game/</guid>
      <description>&lt;p&gt;7.6 举办了 PAC2023 的开幕赛，以轻松娱乐为主，我还没有体验过在短时间内完成优化工作（不过今天的工作量倒也不大）。这场娱乐赛给了我别样的体验，也让我发现了我有好的好多不足，以及一些以前没有注意到的坏习惯。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU 流水线</title>
      <link>https://vaaandark.top/posts/cpu-pipeline/</link>
      <pubDate>Sat, 22 Apr 2023 17:29:49 +0800</pubDate>
      <guid>https://vaaandark.top/posts/cpu-pipeline/</guid>
      <description>&lt;h1 id=&#34;流水线级&#34;&gt;流水线级&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一条流水线的每个分步骤被称为流水线级。它们被流水线寄存器分开。下文中没有说明是流水线寄存器的都是普通 CPU 寄存器。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;现代计算机流水线级数已经达到了 10-20 级，在 2000-2010 年间，流水线级数的竞赛达到了最高峰，那时候的处理器甚至可以有高达 31 级的流水线。但是超深的流水线带来的是结构上的复杂和显著增大的动态调度模块设计难度，因此，从那以后就没有再出现过使用这么多级流水线的 CPU 了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenMP进阶</title>
      <link>https://vaaandark.top/posts/openmp-advance/</link>
      <pubDate>Tue, 02 Aug 2022 22:08:34 +0000</pubDate>
      <guid>https://vaaandark.top/posts/openmp-advance/</guid>
      <description>&lt;p&gt;继续学习 OpenMP 的使用，尤其是一些较新版本。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;openmp-40&#34;&gt;OpenMP 4.0&lt;/h2&gt;
&lt;h3 id=&#34;controlling-openmp-thread-affinity&#34;&gt;Controlling OpenMP thread Affinity&lt;/h3&gt;
&lt;p&gt;因为很多硬件如今是 NUMA 结构，分配线程的位置可以很大程度上影响性能。&lt;/p&gt;
&lt;p&gt;与核绑定有关的 OpenMP 结构 proc_bind (master | close | spread)&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenMP入门</title>
      <link>https://vaaandark.top/posts/openmp-introduction/</link>
      <pubDate>Fri, 29 Jul 2022 09:03:18 +0000</pubDate>
      <guid>https://vaaandark.top/posts/openmp-introduction/</guid>
      <description>&lt;p&gt;写 OpenMP 的时候总是感觉怪怪的，不知道什么时候该用什么，所以最近系统化地看一遍 OpenMP 的使用，主体为 OpenMP 2.0 和 3.0。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;what-is-openmp&#34;&gt;What is OpenMP?&lt;/h2&gt;
&lt;h3 id=&#34;openmp-model&#34;&gt;OpenMP Model&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个线程都有可以访问全局的共享内存。&lt;/li&gt;
&lt;li&gt;数据可以是共享的也可以是私有的。&lt;/li&gt;
&lt;li&gt;共享的数据可以被所有线程访问。&lt;/li&gt;
&lt;li&gt;私有数据只能被拥有它的线程访问。&lt;/li&gt;
&lt;li&gt;数据的传递对于编程者是透明的。&lt;/li&gt;
&lt;li&gt;同步会发生，但是它大部分时候是隐式的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;OpenMP Model&#34; loading=&#34;lazy&#34; src=&#34;https://vaaandark.top/image/openmp-model.png&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

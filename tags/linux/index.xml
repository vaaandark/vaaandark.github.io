<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on vaaandark&#39;s blog</title>
    <link>https://vaaandark.top/tags/linux/</link>
    <description>Recent content in Linux on vaaandark&#39;s blog</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 12 Apr 2025 19:55:13 +0800</lastBuildDate>
    <atom:link href="https://vaaandark.top/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>容器热迁移技术基础</title>
      <link>https://vaaandark.top/posts/container-live-migration-basics/</link>
      <pubDate>Sat, 12 Apr 2025 19:55:13 +0800</pubDate>
      <guid>https://vaaandark.top/posts/container-live-migration-basics/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;容器热迁移是我这次毕业设计的题目，也和我目前在云厂商的工作比较接近。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;技术基础&#34;&gt;技术基础&lt;/h2&gt;
&lt;p&gt;一开始的参考资料是 CIRU 的官网和相关的一些论文，但是后来看到了 Kubernetes 的 2022 年的一篇&lt;a href=&#34;https://kubernetes.io/blog/2022/12/05/forensic-container-checkpointing-alpha/&#34;&gt;官方博客&lt;/a&gt;，发现 checkpoint 功能已经在 1.30 版本稳定了，我将以此功能为基础实现容器热迁移。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pthread</title>
      <link>https://vaaandark.top/posts/pthread/</link>
      <pubDate>Sat, 23 Dec 2023 22:03:25 +0800</pubDate>
      <guid>https://vaaandark.top/posts/pthread/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;赛博考古：Linux 支持 POSIX 线程标准的前世今生&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;线程是什么&#34;&gt;线程是什么&lt;/h2&gt;
&lt;p&gt;操作系统能够进行运算调度的最小单位。在一般的操作系统上，它被包含在进程之中，是进程中的实际运作单位。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么 Rust std fs 慢于 Python</title>
      <link>https://vaaandark.top/posts/rust-slower-than-python/</link>
      <pubDate>Thu, 30 Nov 2023 16:45:58 +0800</pubDate>
      <guid>https://vaaandark.top/posts/rust-slower-than-python/</guid>
      <description>&lt;p&gt;看到了 &lt;a href=&#34;https://github.com/Xuanwo/&#34;&gt;xuanwo&lt;/a&gt; 的一篇 &lt;a href=&#34;https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/&#34;&gt;博客&lt;/a&gt;，感觉很有意思。&lt;/p&gt;
&lt;p&gt;完整读一遍也可以，不过也可以看我的省流。&lt;/p&gt;
&lt;h2 id=&#34;python-io-比-c--rust-io-更快&#34;&gt;Python IO 比 C / Rust IO 更快&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有人发现在 AMD Ryzen 9 5900X 和 AMD Ryzen 7 5700X 上访问页对齐的前10个 byte 会比其他偏移有更多的 L1 prefetch 和 load 的 miss 。&lt;/li&gt;
&lt;li&gt;学过 x86 汇编的应该知道不同于 RISC ，x86 是有专门用于复制字符串的指令的。有人发现上述问题的底层原因来自于 AMD 对 FSRM(Fast Short REP MOV) 的实现，&lt;strong&gt;逆天的是在 Zen 3 上，访问页对齐的数据比不对齐慢&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更有趣的事情&#34;&gt;更有趣的事情&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作者发现将 C 的分配器换成 jemalloc 后速度就可以击败 Python 了，我个人猜测可能是 mmap 后分配的页对齐的内存使用了更多（也就是大于 glibc 的 10 byte）来存 meta data ，恰巧避免了这个硬件 bug 。&lt;/li&gt;
&lt;li&gt;有人使用 eBPF profile 发现 Rust 和 Python 的 fs read 在系统调用的延迟上存在差距，Rust 更慢。&lt;/li&gt;
&lt;li&gt;为了解决这个奇怪的性能问题，作者（开源大手子漩涡）和他的开源伙伴（包括了热心网友、国内开源大佬依云和一些内核开发者）使用了 strace, perf, eBPF 等各种性能分析工具，以及分析了各种可能导致性能问题的原因（内存大页、CPU 核亲和性、mmap 分配匿名内存、Linux 启动选项例如 Enable Mitigations、系统调用延迟等）。&lt;/li&gt;
&lt;li&gt;有 &lt;a href=&#34;https://github.com/Enter-tainer&#34;&gt;朋友&lt;/a&gt; 告诉我「Intel 前几天刚出了 &lt;code&gt;rep mov&lt;/code&gt; 导致的 Dos 漏洞」。&lt;/li&gt;
&lt;li&gt;好消息是 FSRM 是微码实现，也许在未来的某一次更新就修好了🥰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关链接&#34;&gt;相关链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/glibc/+bug/2030515&#34;&gt;Terrible memcpy performance on Zen 3 when using rep movsb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>UEFI 如何启动 Linux</title>
      <link>https://vaaandark.top/posts/how-uefi-startup-linux/</link>
      <pubDate>Sat, 30 Sep 2023 19:59:34 +0800</pubDate>
      <guid>https://vaaandark.top/posts/how-uefi-startup-linux/</guid>
      <description>&lt;p&gt;之前讲到了 Linux 是如何启动的，现在就写一个 UEFI 程序可以启动 Linux ，语言选择的是非常火热的 Rust 。&lt;/p&gt;
&lt;p&gt;Linux Kernel 经过了这么多年的发展，其实完全有着 boot 的能力，使用 UEFI 启动 Kernel 其实是非常简单的一件事情，不再需要像以前 BIOS 启动老版本内核一样要把内核加载到某个内存地址，把参数放到某个内存地址，再将这个地址放到寄存器中等等复杂操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux ，启动！</title>
      <link>https://vaaandark.top/posts/linux-startup/</link>
      <pubDate>Sat, 09 Sep 2023 08:15:06 +0800</pubDate>
      <guid>https://vaaandark.top/posts/linux-startup/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;pull oneself up by one&amp;rsquo;s bootstraps.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;拽着鞋带把自己拉起来&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;大家在安装 Arch Linux 或者其他 Linux 发行版时，可能会看到很多有关启动或者引导的名词，例如 BIOS 、UEFI 、GRUB 、ESP 、GPT 、LBA 、MBR 等等。有些名词比较熟悉，有些就会一头雾水，今天就来讲讲这些名词。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Btrfs 为什么是神？</title>
      <link>https://vaaandark.top/posts/why-btrfs-is-awesome/</link>
      <pubDate>Sat, 25 Feb 2023 13:06:17 +0800</pubDate>
      <guid>https://vaaandark.top/posts/why-btrfs-is-awesome/</guid>
      <description>&lt;p&gt;最近发现 Windows 这几个月开机不超过 10 次，寻思着将 Windows 中的空间挪一点到 Linux 中来。说干就干，在 Windows 里面划出来了 80 GB 的空间。&lt;/p&gt;
&lt;p&gt;遗憾地，这 80 GB 空间物理上在我需要扩容的空间的前面，由于开头的扇区存放有很多元数据，因此是不能简单扩容的，只能寻求其他的方法。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on vaaandark&#39;s blog</title>
    <link>https://vaaandark.top/tags/rust/</link>
    <description>Recent content in Rust on vaaandark&#39;s blog</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 30 Nov 2023 16:45:58 +0800</lastBuildDate>
    <atom:link href="https://vaaandark.top/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为什么 Rust std fs 慢于 Python</title>
      <link>https://vaaandark.top/posts/rust-slower-than-python/</link>
      <pubDate>Thu, 30 Nov 2023 16:45:58 +0800</pubDate>
      <guid>https://vaaandark.top/posts/rust-slower-than-python/</guid>
      <description>&lt;p&gt;看到了 &lt;a href=&#34;https://github.com/Xuanwo/&#34;&gt;xuanwo&lt;/a&gt; 的一篇 &lt;a href=&#34;https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/&#34;&gt;博客&lt;/a&gt;，感觉很有意思。&lt;/p&gt;
&lt;p&gt;完整读一遍也可以，不过也可以看我的省流。&lt;/p&gt;
&lt;h2 id=&#34;python-io-比-c--rust-io-更快&#34;&gt;Python IO 比 C / Rust IO 更快&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有人发现在 AMD Ryzen 9 5900X 和 AMD Ryzen 7 5700X 上访问页对齐的前10个 byte 会比其他偏移有更多的 L1 prefetch 和 load 的 miss 。&lt;/li&gt;
&lt;li&gt;学过 x86 汇编的应该知道不同于 RISC ，x86 是有专门用于复制字符串的指令的。有人发现上述问题的底层原因来自于 AMD 对 FSRM(Fast Short REP MOV) 的实现，&lt;strong&gt;逆天的是在 Zen 3 上，访问页对齐的数据比不对齐慢&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更有趣的事情&#34;&gt;更有趣的事情&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作者发现将 C 的分配器换成 jemalloc 后速度就可以击败 Python 了，我个人猜测可能是 mmap 后分配的页对齐的内存使用了更多（也就是大于 glibc 的 10 byte）来存 meta data ，恰巧避免了这个硬件 bug 。&lt;/li&gt;
&lt;li&gt;有人使用 eBPF profile 发现 Rust 和 Python 的 fs read 在系统调用的延迟上存在差距，Rust 更慢。&lt;/li&gt;
&lt;li&gt;为了解决这个奇怪的性能问题，作者（开源大手子漩涡）和他的开源伙伴（包括了热心网友、国内开源大佬依云和一些内核开发者）使用了 strace, perf, eBPF 等各种性能分析工具，以及分析了各种可能导致性能问题的原因（内存大页、CPU 核亲和性、mmap 分配匿名内存、Linux 启动选项例如 Enable Mitigations、系统调用延迟等）。&lt;/li&gt;
&lt;li&gt;有 &lt;a href=&#34;https://github.com/Enter-tainer&#34;&gt;朋友&lt;/a&gt; 告诉我「Intel 前几天刚出了 &lt;code&gt;rep mov&lt;/code&gt; 导致的 Dos 漏洞」。&lt;/li&gt;
&lt;li&gt;好消息是 FSRM 是微码实现，也许在未来的某一次更新就修好了🥰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关链接&#34;&gt;相关链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/glibc/+bug/2030515&#34;&gt;Terrible memcpy performance on Zen 3 when using rep movsb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Cargo Runner</title>
      <link>https://vaaandark.top/posts/cargo-runner/</link>
      <pubDate>Sun, 22 Oct 2023 11:36:13 +0800</pubDate>
      <guid>https://vaaandark.top/posts/cargo-runner/</guid>
      <description>&lt;p&gt;最近在完成一个使用 Rust 语言编写 Linux 内核引导程序的项目 &lt;a href=&#34;github.com/vaaandark/lboot&#34;&gt;lboot&lt;/a&gt; ，其核心代码和原理在之前的博客中介绍过 &lt;a href=&#34;https://vaaandark.top/posts/how-uefi-startup-linux/&#34;&gt;UEFI 如何启动 Linux&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;因为不可能直接在 UEFI 环境下进行代码开发，所以我使用的是交叉编译的方法，目标平台是 &lt;code&gt;x86_64-unknown-uefi&lt;/code&gt; 和 &lt;code&gt;aarch64-unknown-uefi&lt;/code&gt; 。这就带来了一个问题，使用命令 &lt;code&gt;cargo run&lt;/code&gt; 不能直接运行代码，必须使用 qemu 来模拟目标架构的执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 自引用结构</title>
      <link>https://vaaandark.top/posts/rust-self-referencing-structure/</link>
      <pubDate>Thu, 23 Feb 2023 21:44:37 +0800</pubDate>
      <guid>https://vaaandark.top/posts/rust-self-referencing-structure/</guid>
      <description>&lt;p&gt;今天和朋友交流的时候遇到了自引用问题，之前就在看 &lt;em&gt;Rust Bible&lt;/em&gt; 的时候看到过，但是一直没用 Rust 写过什么数据结构，所以没有使用这个的机会，所以今天就来尝试一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用 Rust 重写星际译王</title>
      <link>https://vaaandark.top/posts/rewrite-stardict-in-rust/</link>
      <pubDate>Wed, 25 Jan 2023 13:21:35 +0800</pubDate>
      <guid>https://vaaandark.top/posts/rewrite-stardict-in-rust/</guid>
      <description>&lt;p&gt;我经常有在终端查单词的需求，之前使用的是自己写的网络爬虫，原理是构造网址 &amp;ldquo;&lt;a href=&#34;https://www.youdao.com/result?word=%7B%7D&amp;amp;lang=en%22&#34;&gt;https://www.youdao.com/result?word={}&amp;amp;lang=en&amp;quot;&lt;/a&gt; 并访问，再通过解析 Html 文件获得单词解释。一个朋友说他用的是 sdcv ，星际译王的终端版本，可以支持离线词典。我也时常脱机工作，对离线词典的需求也不小，所以打算自己写一个支持 StarDict 格式离线词典的软件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust闭包</title>
      <link>https://vaaandark.top/posts/rust-closure/</link>
      <pubDate>Tue, 26 Apr 2022 23:15:48 +0000</pubDate>
      <guid>https://vaaandark.top/posts/rust-closure/</guid>
      <description>&lt;p&gt;Rust 支持函数式编程，因此高阶函数、闭包等特性都不可或缺。&lt;/p&gt;
&lt;p&gt;本文主要参考了 &lt;em&gt;&lt;strong&gt;Rust Course&lt;/strong&gt;&lt;/em&gt; 和 Rust 标准库文档。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;什么是闭包&#34;&gt;什么是闭包&lt;/h2&gt;
&lt;p&gt;闭包是在支持头等函数的编程语言中实现词法绑定的一种技术，与函数不同的是，它可以捕捉自由变量，这意味着即使脱离了闭包创建时的上下文也能正常运行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust迭代器</title>
      <link>https://vaaandark.top/posts/rust-iterator/</link>
      <pubDate>Mon, 25 Apr 2022 23:22:24 +0000</pubDate>
      <guid>https://vaaandark.top/posts/rust-iterator/</guid>
      <description>&lt;p&gt;最近一直在学习 Rust 语言，深感它的学习曲线很陡峭，因此会写几篇博客记录一下学习进度。&lt;/p&gt;
&lt;p&gt;本文主要参考了 &lt;em&gt;&lt;strong&gt;Rust Course&lt;/strong&gt;&lt;/em&gt; 和 Rust 标准库文档。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;什么是迭代器&#34;&gt;什么是迭代器&lt;/h2&gt;
&lt;p&gt;迭代器（iterator），是确使用户可在容器对象（container，例如链表或数组）上遍访的对象，设计人员使用此接口无需关心容器对象的内存分配的实现细节。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
